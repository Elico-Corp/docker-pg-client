#!/usr/bin/python
# -*- coding: utf-8 -*-
##############################################################################
# The MIT License (MIT)

# Copyright (c) 2015 Augustin Cisterne-Kaas

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
##############################################################################
import argparse
from subprocess import call, check_output


def get_tag(container):
    image = check_output(
        ["docker", "inspect", "--format",
         "'{{ .Config.Image }}'", "%s" % container]
    )
    # if no tag
    if ':' not in image:
        return ''
    return image[0:-2].strip("'").rpartition(':')[-1]


def cmd(args):
    res = 'exec dropdb -h db -p %s -U %s %s' % (
        args.port, args.user, args.database)
    return res


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-c', '--container', help="Container name",
        default="containers_postgres_1")
    parser.add_argument(
        '-p', '--port', help="Container internal port", default=5432)
    parser.add_argument('-U', '--user', help="Container user",
                        default='postgres')
    parser.add_argument('database', help="Database name")

    args = parser.parse_args()
    container = args.container
    tag = get_tag(container)
    call(
        '''docker run -it --link %s:db --rm postgres:%s \
           sh -c \'%s\'''' % (
            container, tag, cmd(args)), shell=True)

if __name__ == '__main__':
    main()
